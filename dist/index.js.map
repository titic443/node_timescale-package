{"version":3,"sources":["../src/index.ts","../src/function.ts"],"sourcesContent":["import { TimeScaleSequalize } from \"./function\";\n\nexport { TimeScaleSequalize };\n","import { Dialect, QueryOptions, Sequelize } from \"sequelize\";\n\ninterface CustomSequalizeOpt {\n  dialect?: Dialect;\n  host: string;\n  port: number;\n  username: string;\n  password: string;\n  database: string;\n  query?: QueryOptions;\n}\n\nexport class TimeScaleSequalize extends Sequelize {\n  constructor(options?: CustomSequalizeOpt) {\n    super(options);\n  }\n\n  async addConstraint(\n    table: string,\n    constraintName: string,\n    constraint1?: string,\n    constraint2?: string\n  ) {\n    try {\n      if (constraint2) {\n        await this.query(\n          `\n            ALTER TABLE public.${table}\n            ADD CONSTRAINT ${constraintName} UNIQUE (\"${constraint1}\", \"${constraint2}\");\n            COMMIT;\n            `,\n          {\n            raw: true,\n          }\n        );\n      } else {\n        await this.query(\n          `\n              ALTER TABLE public.${table}\n              ADD CONSTRAINT ${constraintName} UNIQUE (\"${constraint1}\");\n              COMMIT;\n              `,\n          {\n            raw: true,\n          }\n        );\n      }\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  async createHyperTable(table: string, constraint: string, interval?: number) {\n    try {\n      if (interval) {\n        await this.query(\n          `SELECT create_hypertable('${table}', '${constraint}', chunk_time_interval => INTERVAL '${interval.toString()} day');`,\n          {\n            raw: true,\n          }\n        );\n      } else {\n        await this.query(\n          `SELECT create_hypertable('${table}', '${constraint}');`,\n          {\n            raw: true,\n          }\n        );\n      }\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  async createTrigger(name: string, table: string, funcName: string) {\n    try {\n      const q = `\n      CREATE TRIGGER ${name}\n      AFTER INSERT ON \"public\".\"${table}\"\n      FOR EACH ROW\n      EXECUTE FUNCTION ${funcName}();\n      `;\n      await this.query(q);\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  async createFunc(\n    name: string,\n    table: string,\n    column: string[],\n    criteria: string[],\n    constraint?: string\n  ) {\n    try {\n      let setColumn: string = \"\";\n      for (let i = 0; i < column.length; i++) {\n        if (column.length - 1 == i) {\n          setColumn += `\"${column[i]}\" = NEW. \"${column[i]}\"`;\n        } else {\n          setColumn += `\"${column[i]}\" = NEW. \"${column[i]}\",\\n\\t`;\n        }\n      }\n\n      let setCriteria: string = \"\";\n      for (let i = 0; i < criteria.length; i++) {\n        if (criteria.length - 1 == i) {\n          setCriteria += `\"${criteria[i]}\" = NEW. \"${criteria[i]}\";`;\n        } else {\n          setCriteria += `\"${criteria[i]}\" = NEW. \"${criteria[i]}\" and \\n\\t`;\n        }\n      }\n\n      let newC = column.map((value) => `\"${value}\"`);\n      let newCr = column.map((value) => `NEW. \"${value}\"\\n\\t`);\n      let exCr = \"\";\n      for (let i = 0; i < column.length; i++) {\n        if (column.length - 1 == i) {\n          exCr += `\"${column[i]}\" = EXCLUDED.\"${column[i]}\";`;\n        } else {\n          exCr += `\"${column[i]}\" = EXCLUDED.\"${column[i]}\",\\n\\t`;\n        }\n      }\n\n      // console.log(newCr);\n\n      if (constraint) {\n        let q = `\n        CREATE OR REPLACE FUNCTION ${name} ()\n        RETURNS TRIGGER\n        AS $$\n      BEGIN\n        UPDATE\n          \"public\".\"${table}\"\n        SET\n        ${setColumn}\n        WHERE\n        ${setCriteria}\n        IF NOT FOUND THEN\n          INSERT INTO \"public\".\"${table}\" (${newC})\n            VALUES(${newCr})\n        ON CONFLICT ON CONSTRAINT \"${constraint}\" DO UPDATE\n        SET\n          ${exCr}\n        END IF;\n        RETURN NULL;\n      END;\n      $$\n      LANGUAGE plpgsql;\n      `;\n\n        this.query(q);\n      } else {\n        let q = `\n        CREATE OR REPLACE FUNCTION ${name} ()\n        RETURNS TRIGGER\n        AS $$\n      BEGIN\n        UPDATE\n          \"public\".\"${table}\"\n        SET\n        ${setColumn}\n        WHERE\n        ${setCriteria}\n        IF NOT FOUND THEN\n          INSERT INTO \"public\".\"${table}\" (${newC})\n            VALUES(${newCr});\n        END IF;\n        RETURN NULL;\n      END;\n      $$\n      LANGUAGE plpgsql;\n      `;\n        this.query(q);\n      }\n      // console.log(q);\n    } catch (err) {\n      throw err;\n    }\n  }\n}\n"],"mappings":"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","names":[]}